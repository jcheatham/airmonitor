<style>
  .error-details { width: 20px; cursor: pointer;}
  .error-frequency { width: 50px; }
  .error-first { width: 100px; white-space: nowrap; }
  .error-last { width: 100px; white-space: nowrap; }
  .error-count { text-align:right; width: 50px; }
  .error-env { width: 20px; }
  .error-project { width: 100px; white-space: nowrap; }
  .error-message { }
  .notice-at { white-space: nowrap; }
  #exception_table .odd { background: #EEE; }
</style>

<div id="airmonitor_config">
  <div id="status_updates" style="float: right; text-align:right">
    Now: <span id="time_now">now Now NOW!</span><br/>
    <span id="status">-</span>
  </div>
  <div>
    Projects:
    <select id="project_select" multiple>
      <% projects.each do |project| %>
        <option value="<%= project[:id] %>"<%= 'selected="selected"' if selected_projects.include?(project[:id]) %>><%=project[:name]%></option>
      <% end %>
    </select>
    <select id="environment_select" multiple>
      <% ['production','staging','master','other'].each do |env| %>
        <option value="<%= env == 'other' ? '' : env %>"<%= 'selected="selected"' if selected_environments.include?(env) %>><%=env.capitalize%></option>
      <% end %>
    </select>
    <label>
      <input type="checkbox" checked="checked" id="polling"> Auto-refresh
    </label>
  </div>
</div>
<br/>
<div id="airmonitor_display">
  <table id="exception_table" cellpadding="0" cellspacing="0" border="0"></table>
</div>

<script>
  $(document).ready(function(){
    var airbrake_host = 'https://<%= account %>.airbrake.io',
      errors = {},
      project_index = {},
      project_filters = {},
      environment_index = {},
      environment_filters = {},
      last_params = "",
      last_update = 0,
      waiting_for_update = false,
      $project_select = $('#project_select'),
      $environment_select = $('#environment_select'),
      $exception_table = $('#exception_table'),
      $update_status = $('#status'),
      $time_now = $('#time_now');

    $exception_table.dataTable({
      "lengthMenu": [ 20, 50, 100 ],
      "aoColumns":[
        {"sTitle":"","sClass":"error-details","bSortable":false},
        {"sTitle":"Frequency","sClass":"error-frequency","asSorting":["desc","asc"]},
        {"sTitle":"First","sClass":"error-first","asSorting":["desc","asc"]},
        {"sTitle":"Last","sClass":"error-last","asSorting":["desc","asc"]},
        {"sTitle":"Count","sClass":"error-count","asSorting":["desc","asc"]},
        {"sTitle":"Env","sClass":"error-env"},
        {"sTitle":"Project","sClass":"error-project"},
        {"sTitle":"Message","sClass":"error-message"}
      ]
    });

    $project_select.multiselect({selectedList: 4});
    $project_select.on('change', updateFilters);

    $environment_select.multiselect({selectedList: 4});
    $environment_select.on('change', updateFilters);

    $.fn.dataTableExt.afnFiltering.push(function(oSettings, aData, iDataIndex) {
      return project_filters[aData[6]];
    });
    $.fn.dataTableExt.afnFiltering.push(function(oSettings, aData, iDataIndex) {
      return environment_filters[aData[5]];
    });

    updateFilters();

    setInterval(update, 1000);

    setInterval(function(){
      var now = (new Date()).toISOString().replace("T", " ").replace(/\:\d+\.\d+Z/, " UTC");
      if (now != $time_now.text()) $time_now.text(now);
    }, 100);

    $(document).on('click', '#exception_table span.details', function(){
    //$('#exception_table span.details').on('click', function(){
      var tr = $(this).parents('tr');
      var context = tr.find('input[name="context"]').val();
      tr = tr[0];
      if ($exception_table.fnIsOpen(tr)) {
        this.innerHTML = "\u25B6";
        $exception_table.fnClose(tr);
      } else {
        this.innerHTML = "\u25BC";
        $exception_table.fnOpen(tr, addDetails(errors[context]));
      }
    });

    function escapeHtml(unsafe) {
      return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }

    function addDetails(error) {
      var item_base = '<tr><td class="notice-at"><a href="'+airbrake_host+'/projects/'+error.project_id+'/groups/'+error.id+'/notices/'
      var data = '<div id="error_details"><table cellpadding="0" cellspacing="0" border="0" style="padding-left:100px;">';
      $.each(error.notices, function(i,n){
        data += item_base+n.id+'" target="_blank" title="'+n.id+'">'+n.created_at+'</a></td><td>'+ escapeHtml(n.message) +'</td></tr>';
      });
      data += '</table></div>';

      data += "<h2>Backtraces</h2>"
      $.each(error.backtraces, function(i,b){
        data += "<p>Seen " + b.count + " times:<pre>" + b.backtrace + "</pre>"
      });
      return data;
    }

    function updateFilters() {
      project_index = {};
      project_filters = {};
      $project_select.find('option').each(function(i,o){
        project_index[o.value] = o.text;
        project_filters[o.text] = o.selected;
      });
      environment_index = {};
      environment_filters = {};
      $environment_select.find('option').each(function(i,o){
        environment_index[o.value] = o.text;
        environment_filters[o.value] = o.selected;
      });
      update();
      $exception_table.fnDraw();
    }

    function update() {
      var project_ids = $project_select.val() || [];
      var environment_ids = $environment_select.val() || [];

      if (project_ids.length < 1) {
        $update_status.text("Nothing to do.");
        window.history.replaceState(null, "AirMonitor", "/");
        return;
      }

      // make project ids copy-pasteable
      var project_params = project_ids.map(function(x){ return "projects[]="+x; }).join("&");
      var environment_params = environment_ids.map(function(x){ return "environments[]="+x; }).join("&");
      var params = project_params+"&"+environment_params;
      window.history.replaceState(null, "AirMonitor", "/?"+params);

      // stop updating when poll is disabled
      if(!$('#polling:checked')[0]) return;

      var now = Math.round(Date.now()/1000);
      var elapsed = now - last_update;
      if (waiting_for_update && elapsed < 120) return;
      if (params == last_params && elapsed < 30) return;

      last_params = params;
      last_update = now;
      waiting_for_update = true;
      $update_status.text("Fetching updates...");

      $.ajax({
        dataType: "json",
        url: "/errors.json",
        data: params
      }).done(function(data){
        $exception_table.fnClearTable();
        errors = {};
        $.each(data, function(idx,e) {
          errors[e.id] = e;
          var details = '<span class="details">\u25B6</span><input type="hidden" name="context" value="'+e.id+'">';
          var message = '<a href="'+airbrake_host+'/projects/'+e.project_id+'/groups/'+e.id+'" target="_blank">'+escapeHtml(e.message)+'</a>';
          $exception_table.fnAddData([ details, e.frequency.toFixed(2), e.created_at, e.most_recent, e.count, e.env, project_index[e.project_id] || e.project_id, message]);
        });
        $update_status.text("-");
      }).fail(function(jqXHR,textStatus,errorThrown){
        $update_status.text("Failure to retrieve errors.");
      }).always(function(data){
        waiting_for_update = false;
        //$exception_table.fnDraw();
      });
    }
  });
</script>
